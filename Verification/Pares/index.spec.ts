import * as gracely from "gracely"
import "isomorphic-fetch"
import * as dotenv from "dotenv"
import { Pares } from "./index"

jest.setTimeout(30000)

dotenv.config()
const ch3d1Url = process.env.ch3d1Url
const ch3d1Key = process.env.ch3d1Key

describe("pares decoding", () => {
	it("decode pares testing", async () => {
		// Test data only
		const testPares =
			"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"
		const decoded = !ch3d1Url
			? gracely.server.misconfigured("ch3d1Url", "Missing test environment variable.")
			: !ch3d1Key
			? gracely.server.misconfigured("ch3d1Key", "Missing test environment variable.")
			: await Pares.check({ url: ch3d1Url, key: ch3d1Key }, testPares)
		expect(decoded).toEqual({
			amount: 21601,
			cavv: "jI3JBkkaQ1p8CBAAABy0CHUAAAA=",
			cavv_algorithm: "3",
			currency: "DKK",
			eci: "0",
			last4: "1548",
			merchant_id: "02000000000",
			status: "Y",
			xid: "MDAwMDAwMDAwMDEyMzQ1Njc4OTA=",
		})
		expect(
			!gracely.Error.is(decoded) && {
				authenticationType: "Secure3D10AuthenticationResult",
				cavv: decoded.cavv,
				xid: decoded.xid,
				verificationResponse: "Y",
				authenticationAttemptResult: decoded.status,
			}
		).toEqual({
			authenticationAttemptResult: "Y",
			authenticationType: "Secure3D10AuthenticationResult",
			cavv: "jI3JBkkaQ1p8CBAAABy0CHUAAAA=",
			verificationResponse: "Y",
			xid: "MDAwMDAwMDAwMDEyMzQ1Njc4OTA=",
		})
	})
})
